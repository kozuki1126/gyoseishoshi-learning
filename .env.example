# Environment Variables Configuration
# Copy this file to .env.local and update with your actual values
# üö® SECURITY: ALL PRODUCTION VALUES MUST BE CHANGED FROM DEFAULTS

# Authentication - CRITICAL SECURITY SETTINGS
# Generate a strong random secret (minimum 32 characters)
# You can use: openssl rand -base64 32
JWT_SECRET=YOUR_STRONG_JWT_SECRET_HERE_MINIMUM_32_CHARACTERS_REQUIRED
# Example: JWT_SECRET=abc123...your-actual-32+-character-secret-here

# Database Configuration - REQUIRED for Phase 2
# PostgreSQL connection string for Prisma
DATABASE_URL=postgresql://username:password@localhost:5432/gyoseishoshi_learning
# Local development example:
# DATABASE_URL=postgresql://postgres:password@localhost:5432/gyoseishoshi_learning
# Production example:
# DATABASE_URL=postgresql://user:pass@prod-server:5432/gyoseishoshi_learning?schema=public&sslmode=require

# Database Pool Configuration
DATABASE_POOL_TIMEOUT=20000
# Connection pool timeout in milliseconds

# File Upload Settings
UPLOAD_MAX_SIZE=52428800
# Max file size in bytes (50MB default)

# Audio Upload Limits
AUDIO_MAX_SIZE=104857600
# Max audio file size in bytes (100MB default)

# PDF Upload Limits  
PDF_MAX_SIZE=52428800
# Max PDF file size in bytes (50MB default)

# Rate Limiting
MAX_LOGIN_ATTEMPTS=5
# Maximum login attempts before lockout
LOGIN_LOCKOUT_MINUTES=15
# Lockout duration in minutes

MAX_REGISTRATION_ATTEMPTS=3
# Maximum registration attempts per hour
REGISTRATION_LOCKOUT_HOURS=1
# Registration lockout duration in hours

MAX_UPLOAD_ATTEMPTS=10
# Maximum file uploads per hour per IP
UPLOAD_LOCKOUT_HOURS=1
# Upload lockout duration in hours

# Next.js Configuration
NEXT_PUBLIC_SITE_URL=http://localhost:3000
# Change to your production URL when deploying
# Example: NEXT_PUBLIC_SITE_URL=https://yourdomain.com

# Admin Settings
ADMIN_EMAIL=admin@gyoseishoshi-learning.com
# Default admin email for initial setup

# Development Settings
NODE_ENV=development
# Set to 'production' for production deployment

# API Configuration  
API_BASE_URL=http://localhost:3000/api
# Base URL for API calls

# Content Management
CONTENT_PATH=content/units
# Path to markdown content files

# Audio Files
AUDIO_PATH=public/audio
# Path to audio files

# PDF Files  
PDF_PATH=public/pdf
# Path to PDF files

# User Data (Legacy - migrating to database)
USER_DATA_PATH=data
# Path to user data files - will be deprecated after DB migration

# Session Configuration
SESSION_TIMEOUT=604800
# Session timeout in seconds (7 days default)

# Redis Configuration (Future Implementation for Caching)
# REDIS_URL=redis://localhost:6379
# Redis connection for caching and session storage

# Email Configuration (Future Implementation)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASS=your-app-password

# Stripe Configuration (Future Implementation)
# STRIPE_PUBLIC_KEY=pk_test_your_stripe_public_key
# STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
# STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# Analytics Configuration (Future Implementation)
# GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX

# Security Headers (handled by next.config.js)
# CSP_REPORT_URI=https://your-csp-report-endpoint.com

# File Storage (Future Cloud Implementation)
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_REGION=ap-northeast-1
# AWS_S3_BUCKET=your-s3-bucket-name

# Content Delivery Network (Future Implementation)
# CDN_URL=https://your-cdn-domain.com

# Monitoring and Logging (Future Implementation)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# LOG_LEVEL=info

# üóÑÔ∏è DATABASE SETUP INSTRUCTIONS FOR PHASE 2:
# 1. Install PostgreSQL locally or use cloud service (e.g., Railway, Supabase, Heroku)
# 2. Create database: createdb gyoseishoshi_learning
# 3. Update DATABASE_URL with actual credentials
# 4. Run: npm run db:migrate (creates tables)
# 5. Run: npm run db:seed (populates initial data)
# 6. Verify: npm run db:studio (opens Prisma Studio)

# üîí SECURITY CHECKLIST FOR PRODUCTION:
# ‚úÖ Generate strong JWT_SECRET (32+ characters)
# ‚úÖ Configure secure DATABASE_URL with proper credentials
# ‚úÖ Change all default passwords and secrets
# ‚úÖ Enable HTTPS in production
# ‚úÖ Configure proper CORS settings
# ‚úÖ Set up database with proper access controls
# ‚úÖ Configure rate limiting
# ‚úÖ Enable security headers
# ‚úÖ Set up monitoring and alerting
# ‚úÖ Regular security audits
# ‚úÖ Backup and recovery procedures
